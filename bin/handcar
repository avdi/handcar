#!/usr/bin/env ruby

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib handcar]))

require 'rubygems'
require 'main'
require 'file/tail'

Main do

    Scrape Rails logs for traces generated with hc_trace()
  DESC

  option('trace', 't') do
    description 'Include stack traces'
    cast :bool
  end

  option('num=NUM', 'n') do
    description "Only show trace #NUM"
    cast :int
  end

  option('requests', 'r') do
    description "Show requests (beginning and end)"
    cast :bool
  end

  option('follow', 'f') do
    description "Follow log as it grows (like 'tail -f')"
    cast :bool
  end

  option('logfile=FILE', 'l') do
    description "Explicitly specify the path to the log file to scrape"
    cast :string
  end

  environment('RAILS_ENV') do
    description 'The Rails environment (determines log file to use)'
    default 'development'
  end

  def run
    file = if params[:logfile].given?
             params[:logfile].value
           else
             File.join('log', params['RAILS_ENV'].value + '.log')
           end

    scraper = Handcar::LogScraper.new

    if params[:num].given?
      scraper.selected_numbers = Array(params[:num].value)
    end

    if params[:trace].given?
      scraper.included_types << 'stack'
    end

    unless params[:requests].given?
      filters << lambda do |trace|
        trace.type != 'request'
      end
    end

    File.open(file) do |log|
      log.extend(File::Tail)
      log.return_if_eof = (not params[:follow].given?)
      catch(:quit) do
        trap("INT") do
          throw :quit
        end

        log.tail do |line|
          if Handcar::TraceLine.recognizable?(line)
            begin
              trace = Handcar::TraceLine.parse(line)
              if filters.all?{|f| f.call(trace)}
                puts line
              end
            rescue ArgumentError
              # Guess it wasn't recognizable after all...
              puts "<Unrecognizable>"
            end
          end
        end
      end
    end
    exit_success!
  end
end

# EOF
